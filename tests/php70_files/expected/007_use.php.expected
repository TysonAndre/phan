%s:3 PhanCompatibleUseVoidPHP70 Using '\A\void' as void will be a syntax error in PHP 7.1 (void becomes the absence of a return type).
%s:3 PhanUnreferencedUseNormal Possibly zero references to use statement for classlike/namespace void (\A\void)
%s:4 PhanCompatibleUseIterablePHP71 Using '\NS\iterable' as iterable will be a syntax error in PHP 7.2 (iterable becomes a native type with subtypes Array and Iterator).
%s:4 PhanUnreferencedUseNormal Possibly zero references to use statement for classlike/namespace iterable (\NS\iterable)
%s:5 PhanCompatibleUseObjectPHP71 Using '\My\Framework\object' as object will be a syntax error in PHP 7.2 (object becomes a native type that accepts any class instance).
%s:5 PhanUnreferencedUseNormal Possibly zero references to use statement for classlike/namespace object (\My\Framework\object)
%s:6 PhanCompatibleUseMixed Using '\stdClass' as mixed will be a syntax error in PHP 8.0 (mixed becomes a native type that accepts any value).
%s:6 PhanUnreferencedUseNormal Possibly zero references to use statement for classlike/namespace mixed (\stdClass)
%s:7 PhanCompatibleIterableTypePHP70 Return type 'iterable' means a Traversable/array value starting in PHP 7.1. In PHP 7.0, iterable refers to a class/interface with the name 'iterable'
%s:7 PhanCompatibleObjectTypePHP71 Type 'object' refers to any object starting in PHP 7.2. In PHP 7.1 and earlier, it refers to a class/interface with the name 'object'
%s:7 PhanCompatibleVoidTypePHP70 Return type 'void' means the absence of a return value starting in PHP 7.1. In PHP 7.0, void refers to a class/interface with the name 'void'
%s:11 PhanTypeMismatchArgumentReal Argument 1 ($o) is null of type null but \example007() takes object defined at %s:7
%s:11 PhanTypeMismatchArgumentReal Argument 2 ($i) is null of type null but \example007() takes iterable defined at %s:7
