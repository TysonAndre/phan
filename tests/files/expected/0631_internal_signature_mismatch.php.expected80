%s:9 PhanParamNameIndicatingUnused Saw a parameter named $_. If this was used to indicate that a parameter is unused to Phan, consider using @unused-param after a param comment or suppressing unused parameter warnings instead. PHP 8.0 introduces support for named parameters, so changing names to suppress unused parameter warnings is no longer recommended.
%s:10 PhanTypeMismatchReturnProbablyReal Returning new self() of type \BadSerializable1 but unserialize() is declared to return void (no real type) (the inferred real return type has nothing in common with the declared phpdoc return type)
%s:15 PhanParamSignatureMismatchInternal Declaration of function unserialize($x) : int should be compatible with internal function unserialize(string $serialized) : void
%s:15 PhanParamSignatureRealMismatchHasNoParamTypeInternal Declaration of function unserialize($x) : int should be compatible with internal function unserialize(string $serialized) (parameter #1 with no type cannot replace original parameter with type 'string')
%s:21 PhanParamNameIndicatingUnused Saw a parameter named $_. If this was used to indicate that a parameter is unused to Phan, consider using @unused-param after a param comment or suppressing unused parameter warnings instead. PHP 8.0 introduces support for named parameters, so changing names to suppress unused parameter warnings is no longer recommended.
%s:21 PhanParamSignatureMismatchInternal Declaration of function unserialize(&$_) should be compatible with internal function unserialize(string $serialized) : void (Difference in passing by reference in override &$_ of parameter string $serialized)
%s:21 PhanParamSignatureRealMismatchParamIsReferenceInternal Declaration of function unserialize(&$_) should be compatible with internal function unserialize(string $serialized) (parameter #1 is a reference parameter overriding a non-reference parameter)
%s:27 PhanParamNameIndicatingUnused Saw a parameter named $_. If this was used to indicate that a parameter is unused to Phan, consider using @unused-param after a param comment or suppressing unused parameter warnings instead. PHP 8.0 introduces support for named parameters, so changing names to suppress unused parameter warnings is no longer recommended.
%s:27 PhanParamSignatureMismatchInternal Declaration of function unserialize(...$_) should be compatible with internal function unserialize(string $serialized) : void (Difference in being variadic in override ...$_ of parameter string $serialized)
%s:27 PhanParamSignatureRealMismatchParamVariadicInternal Declaration of function unserialize(...$_) should be compatible with internal function unserialize(string $serialized) (parameter #1 is a variadic parameter replacing a non-variadic parameter)
%s:33 PhanParamSignatureMismatchInternal Declaration of function unserialize() should be compatible with internal function unserialize(string $serialized) : void (Saw fewer optional parameters in the override)
%s:33 PhanParamSignatureRealMismatchTooFewParametersInternal Declaration of function unserialize() should be compatible with internal function unserialize(string $serialized) (the method override accepts 0 parameter(s), but the overridden method can accept 1)
%s:39 PhanParamNameIndicatingUnused Saw a parameter named $unused_1. If this was used to indicate that a parameter is unused to Phan, consider using @unused-param after a param comment or suppressing unused parameter warnings instead. PHP 8.0 introduces support for named parameters, so changing names to suppress unused parameter warnings is no longer recommended.
%s:39 PhanParamNameIndicatingUnused Saw a parameter named $unused_2. If this was used to indicate that a parameter is unused to Phan, consider using @unused-param after a param comment or suppressing unused parameter warnings instead. PHP 8.0 introduces support for named parameters, so changing names to suppress unused parameter warnings is no longer recommended.
%s:39 PhanParamSignatureMismatchInternal Declaration of function unserialize($unused_1, $unused_2) should be compatible with internal function unserialize(string $serialized) : void (Saw more required parameters in the override)
%s:39 PhanParamSignatureRealMismatchTooManyRequiredParametersInternal Declaration of function unserialize($unused_1, $unused_2) should be compatible with internal function unserialize(string $serialized) (the method override requires 2 parameter(s), but the overridden method requires only 1)
